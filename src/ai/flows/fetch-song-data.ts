// This file is automatically generated by Firebase Genkit.
'use server';

/**
 * @fileOverview Fetches song data (lyrics, tabs, chords) based on the song name.
 *
 * - fetchSongData - A function that handles the process of fetching song data.
 * - FetchSongDataInput - The input type for the fetchSongData function.
 * - FetchSongDataOutput - The return type for the fetchSongData function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const FetchSongDataInputSchema = z.object({
  songName: z.string().describe('The name of the song to fetch data for.'),
  contentType: z.enum(['tabs', 'chords', 'lyrics']).describe('The type of content to fetch (tabs, chords, or lyrics).'),
});
export type FetchSongDataInput = z.infer<typeof FetchSongDataInputSchema>;

const FetchSongDataOutputSchema = z.object({
  lyrics: z.string().optional().describe('The lyrics of the song.'),
  tabs: z.string().optional().describe('The tabs for the song.'),
  chords: z.string().optional().describe('The chords for the song.'),
});
export type FetchSongDataOutput = z.infer<typeof FetchSongDataOutputSchema>;

export async function fetchSongData(input: FetchSongDataInput): Promise<FetchSongDataOutput> {
  return fetchSongDataFlow(input);
}

const prompt = ai.definePrompt({
  name: 'fetchSongDataPrompt',
  input: {schema: FetchSongDataInputSchema},
  output: {schema: FetchSongDataOutputSchema},
  prompt: `You are a music data retrieval expert. Based on the song name and content type, fetch the corresponding data.

  Song Name: {{{songName}}}
  Content Type: {{{contentType}}}

  Return the data in the specified format. If the content type is lyrics, return the lyrics. If the content type is tabs, return the tabs. If the content type is chords, return the chords.
  If the requested content type is not available, return an empty string for that field.
  `,
});

const fetchSongDataFlow = ai.defineFlow(
  {
    name: 'fetchSongDataFlow',
    inputSchema: FetchSongDataInputSchema,
    outputSchema: FetchSongDataOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
